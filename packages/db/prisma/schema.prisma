// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                 String               @id @default(uuid())
  phoneNumber        String               @unique   
  name               String?
  verified           Boolean              @default(false)
  createdAt          DateTime             @default(now())
  bookings           Booking[]
  payments           Payment[]

}

model Admin{
  id                 String               @id @default(uuid())
  phoneNumber        String               @unique   
  name               String?
  verified           Boolean              @default(false)
  createdAt          DateTime             @default(now())
  events             Event[]
}


model Event{
  id                 String               @id @default(uuid())
  name               String
  description        String
  banner             String
  createdAt          DateTime             @default(now())
  AdminId            String
  admin              Admin                @relation(fields: [AdminId], references: [id])
  bookings           Booking[]
  payments           Payment[]
}


model Booking{
  id                 String               @id @default(uuid())
  eventId            String
  userId             String
  event              Event                @relation(fields: [eventId], references: [id])
  user               User                 @relation(fields: [userId], references: [id])
  seats              seat[]
}

model seat{
  id                 String               @id @default(uuid())
  seatTypeId         String
  bookingId          String
  qr                 String    
  seatType           SeatType             @relation(fields: [seatTypeId], references: [id])
  booking            Booking              @relation(fields: [bookingId], references: [id])
}

model SeatType{
  id                 String               @id @default(uuid())
  name               String
  description        String
  eventId            String
  price              Float
  totalSeats         Int
  availableSeats     Int
  seats              seat[]
}

model Payment{
  id                 String               @id @default(uuid())
  eventId            String
  userId             String
  status             PaymentState
  user               User                 @relation(fields: [userId], references: [id])
  event              Event                @relation(fields: [eventId], references: [id])
}


enum PaymentState{
  PENDING
  COMPLETED
  FAILED
}